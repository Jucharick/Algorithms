// Дерево – это структура данных, эмулирующая древовидную структуру в виде
// набора связанных узлов. Дерево является частным случае графа, в котором
// отсутствуют циклические связи. Дерево состоит из узлов, связанных между собой
// ребрами по принципу родитель-ребенок.

// Один узел может содержать в себе любое количество детей, но у любого ребенка
// может быть только один родитель. Самый верхний узел, не имеющий родителя,
// называется корнем дерева, а узлы, не имеющие детей – листьями.

// Алгоритмы обхода дерева:

// 1. Обход в глубину
// Это рекурсивный
// подход к перебору всех значений в дереве, построенный на вызове всех доступных
// детей для каждого узла. Таким образом максимальная глубина рекурсии будет
// равна максимальной глубине дерева, а порядок будет идти сверху-вниз и
// слева-направо.

// 2. Обход в ширину
// Обход в ширину предполагает, что мы не обрабатываем детей до тех пор, пока все
// родителя одного уровня не были обработаны


// Бинарное дерево
// Бинарным деревом называют частный случай дерева, где все элементы
// обязательно строго уникальны, каждый родитель имеет не более 2 детей, при этом
// левый ребенок всегда меньше родителя, а правый – больше.

package Lec_4;

import java.util.List;

public class Simple_tree {
  private Node root; // начало дерева, откуда идет расчет

  public boolean containsDepth (int value) {
    if (root != null) {
      Node node = containsDepth (value, root);
      if (node != null) {
        return true;
      }
    }
    return false;
  }

  // 1. Обход в глубину
  private Node containsDepth (int value, Node node) {
    if (node.value == value) {
      return node;
    } else {
      for (Node child: node.children) {
        Node result = containsDepth (value, child);
        if (result != null) {
          return result;
        }
      }
    }
    return null;
  }

  // 2. Обход в ширину
  private Node containsWiddth (int value, Node node) {

    return null;
  }

  private class Node {
    private int value;
    private List <Node> children;
  }
}
